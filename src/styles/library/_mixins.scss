/**
 * media queries
 * @param  {int} $width
 */
@mixin mq_max($width){
	@media only screen and (max-width: $width){@content;}
}
@mixin mq_min($width){
	@media only screen and (min-width: $width + 1){@content;}
}
@mixin mq_min_max($min_width, $max_width){
	@media only screen and (min-width: $min_width) and (max-width: $max_width){@content;}
}


/**
 * form input placeholder for different engines
 */
@mixin placeholder{
	&::-webkit-input-placeholder {
		 @content;
	}
	&:-moz-placeholder {
		 @content;
	}
	&::-moz-placeholder {
		 @content;
	}
	&:-ms-input-placeholder {
		 @content;
	}
}


/**
 * colored overlay on top of elements
 * using pseudo elements
 * @param  {string} $pos      before OR after
 * @param  {string} $color    hex OR rgb(a)
 * @param  {int} $z_index: 0  z-index of pseudo element
 */
@mixin overlay($pos, $background, $z_index: 0) {
	&::#{$pos} {
		display: block;
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: $background;
		z-index: $z_index;
	}
}


/**
 * make element center in parent
 * using absolute positioning
 * @param  {boolean} $vertical
 * @param  {boolean} $horizontal
 */
@mixin centered($horizontal, $vertical){
	position: absolute;

	@if($vertical and $horizontal){
		left: 50%;
		top: 50%;
    transform: translate(-50%, -50%);
	}
	@else if($horizontal){
		left: 50%;
    transform: translateX(-50%);
	}
	@else if($vertical){
		top: 50%;
    transform: translateY(-50%);
	}
}

/**
 * generate grid classes => check _grid.scss
 * @param  {string} screen width name
 */
@mixin col-generator($bp: false) { 
	@if $bp {
		@for $col from 1 through 12 {
			.col-#{$bp}-#{$col} {
				flex-basis: percentage( $col / 12);
				max-width: percentage( $col / 12);
			}
		}
	} @else {
		@for $col from 1 through 12 {
			.col-#{$col} {
				flex-basis: percentage( $col / 12);
				max-width: percentage( $col / 12);
			}
		}
	}
	
}